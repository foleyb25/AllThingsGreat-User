<div class="container-fluid pt-5 pb-5">



    <div id="app" v-cloak style="padding: 24px">
        <!-- Blog posts -->
        <H1>{{blog.title}}</H1>
        <div id="preview">
            <%- blog.bodyHTML %>
        </div>
        <div class="rate" id="rating-container">
            <input type="radio" id="star5" name="rate" value="5"/>
            <label for="star5" title="text">5 stars</label>
            <input type="radio" id="star4" name="rate" value="4" />
            <label for="star4" title="text">4 stars</label>
            <input type="radio" id="star3" name="rate" value="3" />
            <label for="star3" title="text">3 stars</label>
            <input type="radio" id="star2" name="rate" value="2" />
            <label for="star2" title="text">2 stars</label>
            <input type="radio" id="star1" name="rate" value="1" />
            <label for="star1" title="text">1 star</label>
            <Button v-on:click="clear()" type="radio" id="clear" name="rate" value="0">X</Button>
            <br>
            <div v-if="isRated">
                <p>Rating Submitted</p>
            </div>
            <div vi-if="!isRated">
                <button v-on:click="submitRating()" :disabled="!isLoggedIn || isRated">Submit</button>
            </div>
        </div>
    
        <div id="score-placeholder">Score</div>
    </div>
</div>

<%- exposeLocalsToBrowser({keys: ['blog', 'isRated', 'isLoggedIn']}) %>

<script>
        const App = new Vue({
            el: '#app',
            data: {
                blog: window.SAILS_LOCALS.blog,
                shouldShowDeleteConfirmation: false,
                selectedBlotToDelete: null,
                isDeletingBlog: false,
                isRated: window.SAILS_LOCALS.isRated,
                isLoggedIn: window.SAILS_LOCALS.isLoggedIn,
    
                // Blog creation State variables
                isCreatingBlog: false,
                blogBodyText: null,
                blogFileImageSource: null,
                selectedFile: null,
                shouldShowBlogForm: false,
            },
            methods: {
                submitRating: async function() {
                    var score = 0;
                    $('#rating-container').find('input').each(function () {
                        if(!this.checked && this.value == '1') {
                            score = 0;
                            document.getElementById('score-placeholder').innerHTML = score
                        }
                        if(this.checked) {
                            score = parseInt(this.value)
                            document.getElementById('score-placeholder').innerHTML = score
                            return false
                        } 
                    });
                    const formData = new FormData()
                    formData.append("userRating", score)
                    formData.append('blogRating', this.blog.rating)
                    formData.append('numberOfRatings', this.blog.numberOfRatings)
                    formData.append('blogId', this.blog.id)
                    try {
                        await axios.put('/blog/submitrating', formData)
                        $("#rating-container :input").attr("disabled", this.isRated);
                        location.reload()
                    } catch (err) {
                        this.isCreatingPost = false
                        console.error(err.toString())
                    }
                },
                clear: function() {
                    $('#rating-container').find('input').each(function () {
                        this.checked = false
                    });
                }
            },
            computed: {
            }
        })
    </script>

<style>
    .rate {
    float: left;
    height: 46px;
    padding: 0 10px;
}
.rate:not(:checked) > input {
    position:absolute;
    top:-9999px;
}
.rate:not(:checked) > label {
    float:right;
    width:1em;
    overflow:hidden;
    white-space:nowrap;
    cursor:pointer;
    font-size:30px;
    color:#ccc;
}
.rate:not(:checked) > label:before {
    content: 'â˜… ';
}

.rate > input:checked ~ label {
    color: #ffc700;    
}
.rate:not(:checked) > label:hover,
.rate:not(:checked) > label:hover ~ label {
    color: #deb217;  
}
.rate > input:checked + label:hover,
.rate > input:checked + label:hover ~ label,
.rate > input:checked ~ label:hover,
.rate > input:checked ~ label:hover ~ label,
.rate > label:hover ~ input:checked ~ label {
    color: #c59b08;
}
</style>